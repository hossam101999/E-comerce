// const express = require("express");
// const fs = require("fs");
// const path = require("path");
// const cors = require("cors");
// const { v4: uuidv4 } = require("uuid");
// const multer = require("multer");
// const bodyParser = require('body-parser');

// const app = express();
// const port = 5000;

// app.use(cors());
// app.use(bodyParser.json());

// // إعدادات multer لتخزين الملفات
// const storage = multer.diskStorage({
//   destination: (req, file, cb) => {
//     const uploadDir = path.join(__dirname, "uploads");
//     if (!fs.existsSync(uploadDir)) {
//       fs.mkdirSync(uploadDir, { recursive: true });
//     }
//     cb(null, uploadDir);
//   },
//   filename: (req, file, cb) => {
//     const ext = path.extname(file.originalname);
//     const filename = Date.now() + ext;
//     cb(null, filename);
//   },
// });
// const upload = multer({ storage: storage });

// const dataPath = path.join(__dirname, "data", "data.json");
// if (!fs.existsSync(path.join(__dirname, "data"))) {
//   fs.mkdirSync(path.join(__dirname, "data"), { recursive: true });
// }
// const readData = () => {
//   try {
//     return JSON.parse(fs.readFileSync(dataPath, "utf8"));
//   } catch (error) {
//     throw new Error("Error reading data");
//   }
// };
// const writeData = (data) => {
//   try {
//     fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
//   } catch (error) {
//     throw new Error("Error writing data");
//   }
// };

// const validatePost = (post) => {
//   return (
//     post.title &&
//     typeof post.title === "string" &&
//     post.description &&
//     typeof post.description === "string"
//   );
// };

// const validateComment = (comment) => {
//   return comment.text && typeof comment.text === "string";
// };
// app.get('/users', (req, res) => {
//   const data = readData();
//   res.json(data.users);
// });
// app.post('/users/register', (req, res) => {
//   const { name, email, password } = req.body;

//   if (!email || !password) {
//     return res.status(400).json({ message: 'Email and password are required' });
//   }

//   const data = readData();
//   const existingUser = data.users.find((user) => user.email === email);
//   if (existingUser) {
//     return res.status(400).json({ message: 'User already exists' });
//   }

//   const user = { id: uuidv4(), name, email, password };
//   data.users.push(user);
//   writeData(data);

//   res.status(201).json({ message: 'User registered successfully', user });
// });

// // تسجيل دخول مستخدم
// app.post('/users/login', (req, res) => {
//   const { email, password } = req.body;

//   const data = readData();
//   const user = data.users.find(
//     (user) => user.email === email && user.password === password
//   );

//   if (!user) {
//     return res.status(400).json({ message: 'Invalid email or password' });
//   }

//   res.status(200).json({ message: 'Login successful', user });
// });

// // إدارة البوستات

// // جلب جميع البوستات
// app.get('/posts', (req, res) => {
//   const data = readData();
//   res.json(data.posts);
// });

// // إضافة بوست
// app.post("/posts", upload.single("image"), (req, res) => {
//   try {
//     const data = readData();
//     const newPost = req.body;

//     if (!validatePost(newPost)) {
//       return res.status(400).json({ message: "Invalid post data" });
//     }

//     if (!newPost.userId) {
//       return res.status(400).json({ message: "User ID is required" });
//     }

//     const user = data.users.find(user => user.id === newPost.userId);
//     if (!user) {
//       return res.status(400).json({ message: "Invalid user ID" });
//     }

//     newPost.id = uuidv4();
//     newPost.comments = newPost.comments || [];
//     newPost.image = req.file ? req.file.filename : ""; 

//     data.posts.push(newPost);
//     writeData(data);
//     res.status(201).json(newPost);
//   } catch (error) {
//     res.status(500).json({ message: "Error creating post", error: error.message });
//   }
// });

// // تعديل بوست
// app.put("/posts/:id", (req, res) => {
//   try {
//     const data = readData();
//     const postIndex = data.posts.findIndex((p) => p.id === req.params.id);

//     if (postIndex === -1) {
//       return res.status(404).json({ message: "Post not found" });
//     }

//     const updatedPost = req.body;
//     if (!validatePost(updatedPost)) {
//       return res.status(400).json({ message: "Invalid post data" });
//     }

//     if (updatedPost.userId && data.posts[postIndex].userId !== updatedPost.userId) {
//       return res.status(403).json({ message: "User ID mismatch" });
//     }

//     // تحديث البوست بدون التعامل مع الصور
//     data.posts[postIndex] = { ...data.posts[postIndex], ...updatedPost };
//     writeData(data);

//     res.json(data.posts[postIndex]);
//   } catch (error) {
//     res.status(500).json({ message: "Error updating post", error: error.message });
//   }
// });


// app.delete("/posts/:id", (req, res) => {
//   try {
//     const data = readData();
//     const postIndex = data.posts.findIndex((p) => p.id === req.params.id);

//     if (postIndex !== -1) {
//       const postUserId = data.posts[postIndex].userId;

//       const user = data.users.find(user => user.id === postUserId);
//       if (!user) {
//         return res.status(400).json({ message: "Invalid user ID" });
//       }

//       data.posts.splice(postIndex, 1);
//       writeData(data);
//       res.status(204).end();
//     } else {
//       res.status(404).json({ message: "Post not found" });
//     }
//   } catch (error) {
//     res.status(500).json({ message: "Error deleting post", error: error.message });
//   }
// });

// // إضافة تعليق
// app.post("/posts/:id/comments", (req, res) => {
//   try {
//     const data = readData();
//     const postIndex = data.posts.findIndex((p) => p.id === req.params.id);

//     if (postIndex !== -1) {
//       const newComment = req.body;

//       if (!validateComment(newComment)) {
//         return res.status(400).json({ message: "Invalid comment data" });
//       }

//       newComment.id = uuidv4();
//       if (!data.posts[postIndex].comments) {
//         data.posts[postIndex].comments = [];
//       }

//       data.posts[postIndex].comments.push(newComment);
//       writeData(data);
//       res.status(201).json(newComment);
//     } else {
//       res.status(404).json({ message: "Post not found" });
//     }
//   } catch (error) {
//     res.status(500).json({ message: "Error creating comment", error: error.message });
//   }
// });

// // تعديل تعليق
// app.put("/posts/:postId/comments/:commentId", (req, res) => {
//   try {
//     const data = readData();
//     const postIndex = data.posts.findIndex((p) => p.id === req.params.postId);

//     if (postIndex !== -1) {
//       const commentIndex = data.posts[postIndex].comments.findIndex(
//         (c) => c.id === req.params.commentId
//       );

//       if (commentIndex !== -1) {
//         const updatedComment = req.body;

//         if (!validateComment(updatedComment)) {
//           return res.status(400).json({ message: "Invalid comment data" });
//         }

//         data.posts[postIndex].comments[commentIndex] = {
//           ...data.posts[postIndex].comments[commentIndex],
//           ...updatedComment,
//         };
//         writeData(data);
//         res.json(data.posts[postIndex].comments[commentIndex]);
//       } else {
//         res.status(404).json({ message: "Comment not found" });
//       }
//     } else {
//       res.status(404).json({ message: "Post not found" });
//     }
//   } catch (error) {
//     res.status(500).json({ message: "Error updating comment", error: error.message });
//   }
// });

// // حذف تعليق
// app.delete("/posts/:postId/comments/:commentId", (req, res) => {
//   try {
//     const data = readData();
//     const postIndex = data.posts.findIndex((p) => p.id === req.params.postId);

//     if (postIndex !== -1) {
//       const commentIndex = data.posts[postIndex].comments.findIndex(
//         (c) => c.id === req.params.commentId
//       );

//       if (commentIndex !== -1) {
//         data.posts[postIndex].comments.splice(commentIndex, 1);
//         writeData(data);
//         res.status(204).end();
//       } else {
//         res.status(404).json({ message: "Comment not found" });
//       }
//     } else {
//       res.status(404).json({ message: "Post not found" });
//     }
//   } catch (error) {
//     res.status(500).json({ message: "Error deleting comment", error: error.message });
//   }
// });

// app.listen(port, () => {
//   console.log(`Server running on port ${port}`);
// });
 